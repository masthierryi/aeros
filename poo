import os  
os.system('cls')

import numpy as np

class Static_Study:  # OBJECT ========================================================
    # PROPERTIES --------------------------------------------------------------------
    class Data:  # struct for problem data
        def __init__(self):
            # parâmetros ar
            self.rho = 1.17        # Densidade do ar (kg/m³)
            self.V = 18.59             # Velocidade do fluxo (m/s)
            self.mu = 1.789e-5       # Viscosidade dinâmica do ar (Pa·s)
            self.g = 9.81           # Gravidade (m/s²)
            self.alpha = 5          # Ângulo de ataque (graus)
            self.Re = 472803.242    # Reynolds
            # self.Mach = 0.055


            # parametros aeronave
            self.m = 7            # Massa da aeronave (kg)
            self.W = self.m*self.g  # peso da aeronave

            # parametros da asa
            # self.b = 2.5              # envergadura
            # self.C_t = 0.25            # corda na ponta
            # self.C_r = 0.5            # corda na raiz
            # self.C_m_g = 0          # corda media geométrica
            # corda média aerodinâmica (m)
            self.C_m_a = (2/3)*self.C_r*((1+self.tap+self.C_r**2)/(1+self.tap))        
            # self.sweeping = 0       # enflexamento
            self.tap = self.C_t/self.C_r   # afilamento
            # self.gamma = 0          # angulo do diedro
            # self.deltay = 0         # espessura relativa
            self.S = 0.9             # area da asa (m²)

    class Result:  # initializing struct for results
        def __init__(self):
            self.L = 0
            self.D = 0
            self.C_L = 0
            self.C_D = 0
            self.StolSpeed = 0

    # METHODS -----------------------------------------------------------------------
    # constructor
    def __init__(self): 
        self.data = self.Data()
        self.result = self.Result()

        self.coeficientes_aprox()  # Calcula coeficientes aproximados
        self.aero_forces()         # Calcula as forças aerodinâmicas
        self.coeficientes()        # Calcula coeficientes mais exatos

    # Calcula C_L e C_D a partir do ângulo de ataque e número de Reynolds 
    def coeficientes_aprox(self):
        C_f = 0.074 / (self.data.Re**0.2) # coeficiente de atrito C_d para fluxo turbulento                
        self.result.C_D = C_f  # considerando apenas o arrasto de pele

    # Calcula as forças aerodinâmicas 
    def aero_forces(self):
        # Lift force
        self.result.L = self.data.W
        # Drag force
        self.result.D = 0.5 * self.data.rho * self.data.V**2 * self.data.S * self.result.C_D

    #  Calcula coeficientes a partir das forças aerodinâmicas
    def coeficientes(self):
        # Lift coefficient
        self.result.C_L = self.result.L / (0.5 * self.data.rho * self.data.V**2 * self.data.S)
        # Drag coefficient
        self.result.C_D = self.result.D / (0.5 * self.data.rho * self.data.V**2 * self.data.S)
        # Stol speed
        self.result.StolSpeed = np.sqrt((2*self.data.W)/(self.data.rho * self.data.S * self.result.C_L))


# CALL ==============================================================================
aero = Static_Study()
print(f"C_L: {aero.result.C_L}, C_D: {aero.result.C_D}, L: {aero.result.L}, D: {aero.result.D}, StolSpeed: {aero.result.StolSpeed}")
