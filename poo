import os  
os.system('cls')

import numpy as np

class Static_Study:  
    class Data:
        def __init__(s, W_type="max"):  
            s.rho = 1.17      # Densidade do ar (kg/m³)
            s.V = 18.59       # Velocidade do fluxo (m/s)
            s.mu = 1.789e-5   # Viscosidade dinâmica do ar (Pa·s)
            s.g = 9.81        # Gravidade (m/s²)
            s.alpha = 5       # Ângulo de ataque (graus)
            s.Re = 472803.242 # Reynolds
            s.Mach = 0.055    # Número de Mach

            # Parâmetros da aeronave
            s.m_max = 20      
            s.m_min = 5       
            s.m_vazia = 5     
            s.CUmin = 5       

            # Pesos (agora são variáveis separadas)
            s.W_max = s.m_max * s.g     
            s.W_min = (s.CUmin + s.m_vazia) * s.g  

            # Define qual peso será usado
            s.W = s.W_max if W_type == "max" else s.W_min

            # Parâmetros da asa
            s.b = 2.5          
            s.C_t = 0.25       
            s.C_r = 0.5        
            s.sweeping = 0     
            s.tap = s.C_t / s.C_r    
            s.gamma = 0        
            s.deltay = 0       
            s.S = 0.9          

            # Cálculo da corda média aerodinâmica (C_m_a)
            s.C_m_a = (2 / 3) * s.C_r * ((1 + s.tap + s.C_r ** 2) / (1 + s.tap))

            # Estabilizador horizontal
            s.tap_EH = 0.5
            s.C_r_EH = s.S / ((s.tap_EH + 1) * (s.b / 2))  
            s.C_t_EH = s.tap_EH * s.C_r_EH  
            s.offset_tip_EH = s.C_r_EH - s.C_t_EH  
            s.C_m_a_EH = (2 / 3) * s.C_r * ((1 + s.tap_EH + s.C_r ** 2) / (1 + s.tap_EH))

    class Result:  
        def __init__(s):
            s.L = 0
            s.D = 0
            s.C_L = 0
            s.C_D = 0
            s.StolSpeed = 0

    def __init__(s, W_type="max"):  
        s.data = s.Data(W_type)  
        s.result = s.Result()

        s.coeficientes_aprox()  
        s.aero_forces()         
        s.coeficientes()        

    def coeficientes_aprox(s):
        C_f = 0.074 / (s.data.Re ** 0.2)                 
        s.result.C_D = C_f  

    def aero_forces(s):
        s.result.L = s.data.W  
        s.result.D = 0.5 * s.data.rho * s.data.V**2 * s.data.S * s.result.C_D

    def coeficientes(s):
        s.result.C_L = s.result.L / (0.5 * s.data.rho * s.data.V**2 * s.data.S)
        s.result.C_D = s.result.D / (0.5 * s.data.rho * s.data.V**2 * s.data.S)
        s.result.StolSpeed = np.sqrt((2 * s.data.W) / (s.data.rho * s.data.S * s.result.C_L))

# Exemplo de chamada
aero = Static_Study(W_type="max")  # Use "min" para W_min
print(f"C_L: {aero.result.C_L}, C_D: {aero.result.C_D}, L: {aero.result.L}, D: {aero.result.D}, StolSpeed: {aero.result.StolSpeed}")
